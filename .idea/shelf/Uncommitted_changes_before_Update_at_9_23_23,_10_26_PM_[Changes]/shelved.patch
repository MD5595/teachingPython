Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># import streamlit as st\n#\n#\n# st.set_page_config(page_title=\"py.EDU\", page_icon=\":snake:\", layout=\"wide\", initial_sidebar_state=\"auto\",\n#                    menu_items=None)\n# st.header(\":blue[py]:red[EDU]:snake:\")\n# expandtitle = None\n#\n#\n#\n#\n# def unit1ss():\n#     st.write(st.session_state.q1)\n#\n# with st.sidebar:\n#     \"Select:\"\n#     with st.expander(\"Practice Tools\"):\n#         if st.button(\"Flashcard Maker\"):\n#             expandtitle = \"Flashcards\"\n#     with st.expander(\"Unit 1\"):\n#         if st.button(\"Unit 1.1: Python Introduction\"):\n#             expandtitle = \"Unit 1.1\"\n#         if st.button(\"Unit 1.2: Syntax and Formatting Conventions\"):\n#             expandtitle = \"Unit 1.2\"\n#         if st.button(\"Unit 1.3: Variables\"):\n#             expandtitle = \"Unit 1.3\"\n#         if st.button(\"Unit 1.4: Inputs and Outputs\"):\n#             expandtitle = \"Unit 1.4\"\n#         if st.button(\"Unit 1.5: Summary\"):\n#             expandtitle = \"Unit 1.5\"\n#\n#     with st.expander(\"Unit 4\"):\n#         if st.button(\"Unit 4.1\"):\n#             expandtitle = \"Unit 4.1\"\n#\n# if expandtitle == \"Unit 1.1\":\n#     st.header(\"Unit 1.1: Introduction to Python\")\n#     st.divider()\n#     st.markdown(\"In this introductory chapter, we'll take our first steps \"\n#                 \"into the world of Python programming. Python is a versatile\"\n#                 \" and beginner-friendly programming language known for its simplicity\"\n#                 \" and readability. By the end of this chapter, you'll have written your\"\n#                 \" first Python program and gained insight into the wide range of applications \"\n#                 \"Python can be used for.\")\n#     st.divider()\n#     st.subheader(\"Hello, Python!\")\n#     st.markdown(\"In this section, we'll start with a classic \\\"Hello, World!\\\" program. This simple program\" \\\n#                 \"will introduce you to the basic structure of Python code and how to run it.\")\n#     st.markdown(\"\\t - We'll guide you through the process of writing your first Python program that displays \\\"Hello, \"\n#                 \"World!\\\" on the screen.\")\n#     st.markdown(\"To create a file, open any code editor (IDE or terminal) environment you have. Create a new Python \"\n#                 \"file called \\\"hello_world.py\\\" In this file you will want to code the following, don't worry we will \"\n#                 \"explain it later.\")\n#     st.code(\"if __name__ == \\\"__main__\\\":\\n\"\n#             \"\\tprint(\\\"Hello, World!\\\")\", language='python')\n#     st.markdown(\"After writing your first program, choose which way you want to run it. If you are writing code in \"\n#                 \"the terminal \"\n#                 \"you would use the \\\"python3 hello_world.cpp\\\" command. Whatever way you run it, the result of the \"\n#                 \"program should be:\")\n#     st.code(\"Hello, World!\", language='python')\n#     question1 = st.radio(\"What would hello_world.py output?\", (\"Hello, World!\", \"Hello, Python\", \"Hello\", \"Bye\"),\n#              index=None, key=\"q1\")\n#     unit1ss()\n#\n#\n#\n# elif expandtitle == \"Unit 1.2\":\n#     st.header(\"Unit 1.2: Syntax and Formatting Conventions\")\n# elif expandtitle == \"Unit 1.3\":\n#     st.header(\"Unit 1.3: Variables\")\n# elif expandtitle == \"Unit 1.4\":\n#     st.header(\"Unit 1.4: Inputs and Outputs\")\n# elif expandtitle == \"Unit 1.5\":\n#     st.header(\"Unit 1.5: Summary\")\n# elif expandtitle == \"Unit 4.1\":\n#     st.header(\"Unit 4.1: \")\n# elif expandtitle == \"Cheatsheet\":\n#     st.header(\"Cheatsheet\")\n# elif expandtitle == \"Flashcards\":\n#     st.header(\"Flashcards\")\n#     #start your code here\n# elif expandtitle == \"Home\":\n#     st.header(\"Home\")\n\nimport streamlit as st\n\nst.set_page_config(\n    page_title=\"py.EDU\",\n    page_icon=\":snake:\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None\n)\nst.header(\":blue[py]:red[EDU]:snake:\")\n\n# Initialize session state\nif 'expandtitle' not in st.session_state:\n    st.session_state.expandtitle = None\n\ndef unit1ss():\n    st.write(st.session_state.q1)\n\nwith st.sidebar:\n    \"Select:\"\n    with st.expander(\"Practice Tools\"):\n        if st.button(\"Flashcard Maker\"):\n            st.session_state.expandtitle = \"Flashcards\"\n    with st.expander(\"Unit 1\"):\n        if st.button(\"Unit 1.1: Python Introduction\"):\n            st.session_state.expandtitle = \"Unit 1.1\"\n        if st.button(\"Unit 1.2: Syntax and Formatting Conventions\"):\n            st.session_state.expandtitle = \"Unit 1.2\"\n        if st.button(\"Unit 1.3: Variables\"):\n            st.session_state.expandtitle = \"Unit 1.3\"\n        if st.button(\"Unit 1.4: Inputs and Outputs\"):\n            st.session_state.expandtitle = \"Unit 1.4\"\n        if st.button(\"Unit 1.5: Summary\"):\n            st.session_state.expandtitle = \"Unit 1.5\"\n\n    with st.expander(\"Unit 4\"):\n        if st.button(\"Unit 4.1\"):\n            st.session_state.expandtitle = \"Unit 4.1\"\n\nif st.session_state.expandtitle == \"Unit 1.1\":\n    st.header(\"Unit 1.1: Introduction to Python\")\n    st.divider()\n    st.markdown(\"In this introductory chapter, we'll take our first steps \"\n                \"into the world of Python programming. Python is a versatile\"\n                \" and beginner-friendly programming language known for its simplicity\"\n                \" and readability. By the end of this chapter, you'll have written your\"\n                \" first Python program and gained insight into the wide range of applications \"\n                \"Python can be used for.\")\n    st.divider()\n    st.subheader(\"Hello, Python!\")\n    st.markdown(\"In this section, we'll start with a classic \\\"Hello, World!\\\" program. This simple program\" \\\n                \"will introduce you to the basic structure of Python code and how to run it.\")\n    st.markdown(\"\\t - We'll guide you through the process of writing your first Python program that displays \\\"Hello, \"\n                \"World!\\\" on the screen.\")\n    st.markdown(\"To create a file, open any code editor (IDE or terminal) environment you have. Create a new Python \"\n                \"file called \\\"hello_world.py\\\" In this file you will want to code the following, don't worry we will \"\n                \"explain it later.\")\n    st.code(\"if __name__ == \\\"__main__\\\":\\n\"\n            \"\\tprint(\\\"Hello, World!\\\")\", language='python')\n    st.markdown(\"After writing your first program, choose which way you want to run it. If you are writing code in \"\n                \"the terminal \"\n                \"you would use the \\\"python3 hello_world.cpp\\\" command. Whatever way you run it, the result of the \"\n                \"program should be:\")\n    st.code(\"Hello, World!\", language='python')\n    question1 = st.radio(\"What would hello_world.py output?\", (\"Hello, World!\", \"Hello, Python\", \"Hello\", \"Bye\"),\n             index=None, key=\"q1\")\n\n\nelif st.session_state.expandtitle == \"Unit 1.2\":\n    st.header(\"Unit 1.2: Syntax and Formatting Conventions\")\n    # Add content for Unit 1.2\n\nelif st.session_state.expandtitle == \"Unit 1.3\":\n    st.header(\"Unit 1.3: Variables\")\n    # Add content for Unit 1.3\n\nelif st.session_state.expandtitle == \"Unit 1.4\":\n    st.header(\"Unit 1.4: Inputs and Outputs\")\n    # Add content for Unit 1.4\n\nelif st.session_state.expandtitle == \"Unit 1.5\":\n    st.header(\"Unit 1.5: Summary\")\n    # Add content for Unit 1.5\n\nelif st.session_state.expandtitle == \"Unit 4.1\":\n    st.header(\"Unit 4.1:\")\n    # Add content for Unit 4.1\n\nelif st.session_state.expandtitle == \"Cheatsheet\":\n    st.header(\"Cheatsheet\")\n    # Add content for Cheatsheet\n\nelif st.session_state.expandtitle == \"Flashcards\":\n    st.header(\"Flashcards\")\n    # Add content for Flashcards\n\nelif st.session_state.expandtitle == \"Home\":\n    st.header(\"Home\")\n    # Add content for Home\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision f6a8beff377f1794e804dcae99e19d2be11ea3f6)
+++ b/main.py	(date 1695519573767)
@@ -83,6 +83,7 @@
 #     st.header("Home")
 
 import streamlit as st
+from account import account
 
 st.set_page_config(
     page_title="py.EDU",
@@ -92,7 +93,7 @@
     menu_items=None
 )
 st.header(":blue[py]:red[EDU]:snake:")
-
+account()
 # Initialize session state
 if 'expandtitle' not in st.session_state:
     st.session_state.expandtitle = None
Index: account.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\n\ndef account():\n\n    user_credentials = {}\n    flag = True\n\n    st.title(\"Account\")\n\n    if st.button(\"Sign Up\"):\n        create_credentials(user_credentials)\n\n    if st.button(\"Login\"):\n\n        login()\n        user_info = login()\n        check_credentials(user_info[0], user_info[1], user_credentials)\n\n        while flag:\n\n            if check_credentials(user_info[0], user_info[1], user_credentials):\n                st.success(\"Access granted\")\n                flag = False\n            else:\n                st.error(\"Access denied, Try Again\")\n                login()\n\n\ndef create_credentials(credentials):\n\n    # Asks user for their info\n    with st.form(key='Account Creation'):\n        username = (st.text_input(\"Enter a username for your account: \", \"Type here...\"))\n        password = (st.text_input(\"Enter a password for your account (8 characters or numbers): \", \"Type here...\"))\n        st.form_submit_button(\"Sign Up!\")\n    # stores user info in dictionary and returns dictionary\n    credentials[username] = password\n    return credentials\n\n\ndef login():\n\n    cred_list = []\n    with st.form(key='Log-In'):\n        username = (st.text_input(\"Enter the username for your account: \", \"Type here...\"))\n        password = (st.text_input(\"Enter the password for your account: \", \"Type here...\"))\n        st.form_submit_button(\"Log In!\")\n\n    cred_list.append(username)\n    cred_list.append(password)\n\n    return cred_list\n\ndef check_credentials(username, password, credentials):\n    \"\"\"\n    Using dictionary of account information, checks to see if user exists\n    when logging in\n    \"\"\"\n\n    if username in credentials and (credentials[username] == password):\n        return True\n    elif (username in credentials) and (credentials[username] != password):\n        st.warning(\"Incorrect password, try again.\")\n        return False\n    elif username not in credentials:\n        st.warning(\"Username incorrect, try again or Create Account.\")\n        return False\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account.py b/account.py
--- a/account.py	(revision f6a8beff377f1794e804dcae99e19d2be11ea3f6)
+++ b/account.py	(date 1695522385844)
@@ -1,14 +1,14 @@
 import streamlit as st
 
+
 def account():
 
     user_credentials = {}
-    flag = True
 
     st.title("Account")
 
-    if st.button("Sign Up"):
-        create_credentials(user_credentials)
+   # if st.button("Sign Up"):
+       # create_credentials(user_credentials)
 
     if st.button("Login"):
 
@@ -16,41 +16,43 @@
         user_info = login()
         check_credentials(user_info[0], user_info[1], user_credentials)
 
-        while flag:
+        #while flag:
 
-            if check_credentials(user_info[0], user_info[1], user_credentials):
-                st.success("Access granted")
-                flag = False
-            else:
-                st.error("Access denied, Try Again")
-                login()
+        if check_credentials(user_info[0], user_info[1], user_credentials):
+            st.success("Access granted")
+            #flag = False
+        else:
+            st.error("Access denied, Try Again")
+            login()
 
 
-def create_credentials(credentials):
+#def create_credentials(credentials):
 
     # Asks user for their info
-    with st.form(key='Account Creation'):
-        username = (st.text_input("Enter a username for your account: ", "Type here..."))
-        password = (st.text_input("Enter a password for your account (8 characters or numbers): ", "Type here..."))
-        st.form_submit_button("Sign Up!")
+   # with st.form('Account Creation'):
+     #   username = (st.text_input("Enter a username for your account: "))
+      #  password = (st.text_input("Enter a password for your account (8 characters or numbers): ", type="password"))
+       # st.form_submit_button("Sign Up!")
+
     # stores user info in dictionary and returns dictionary
-    credentials[username] = password
-    return credentials
+    #credentials[username] = password
+   # return credentials
 
 
 def login():
 
     cred_list = []
-    with st.form(key='Log-In'):
-        username = (st.text_input("Enter the username for your account: ", "Type here..."))
-        password = (st.text_input("Enter the password for your account: ", "Type here..."))
-        st.form_submit_button("Log In!")
+    st.header('Log-In')
+    the_username = (st.text_input("Username: "))
+    the_password = (st.text_input("Password: ", type="password"))
+    st.button("Log In!")
 
-    cred_list.append(username)
-    cred_list.append(password)
+    cred_list.append(the_username)
+    cred_list.append(the_password)
 
     return cred_list
 
+
 def check_credentials(username, password, credentials):
     """
     Using dictionary of account information, checks to see if user exists
@@ -66,3 +68,11 @@
         st.warning("Username incorrect, try again or Create Account.")
         return False
 
+""""
+def data_collection:
+    
+    average_progress = num_correct // num_attempts
+    
+    
+    
+"""
