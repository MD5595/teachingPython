Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\n\nst.set_page_config(\n    page_title=\"py.EDU\",\n    page_icon=\":snake:\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None\n)\nst.header(\":blue[py]:red[EDU]:snake:\")\n\nif 'expandtitle' not in st.session_state:\n    st.session_state.expandtitle = None\nquestion2 = {0: \"\", 1: \"\"}\n\n\n\n\nwith st.sidebar:\n    \"Select:\"\n    if st.button(\"Home\",use_container_width=True):\n        st.session_state.expandtitle = \"Home\"\n\n    with st.expander(\"Practice Tools\"):\n        if st.button(\"Flashcard Maker\"):\n            st.session_state.expandtitle = \"Flashcards\"\n    with st.expander(\"Unit 1\"):\n        if st.button(\"Unit 1.1: Python Introduction\"):\n            st.session_state.expandtitle = \"Unit 1.1\"\n        if st.button(\"Unit 1.2: Syntax and Formatting Conventions\"):\n            st.session_state.expandtitle = \"Unit 1.2\"\n        if st.button(\"Unit 1.3: Variables\"):\n            st.session_state.expandtitle = \"Unit 1.3\"\n        if st.button(\"Unit 1.4: Inputs and Outputs\"):\n            st.session_state.expandtitle = \"Unit 1.4\"\n        if st.button(\"Unit 1.5: Summary\"):\n            st.session_state.expandtitle = \"Unit 1.5\"\n\n    with st.expander(\"Unit 4\"):\n        if st.button(\"Unit 4.1\"):\n            st.session_state.expandtitle = \"Unit 4.1\"\n\nif st.session_state.expandtitle == \"Unit 1.1\":\n    st.header(\"Unit 1.1: Introduction to Python\")\n    st.divider()\n    st.markdown(\"In this introductory chapter, we'll take our first steps \"\n                \"into the world of Python programming. Python is a versatile\"\n                \" and beginner-friendly programming language known for its simplicity\"\n                \" and readability. By the end of this chapter, you'll have written your\"\n                \" first Python program and gained insight into the wide range of applications \"\n                \"Python can be used for.\")\n    st.divider()\n    st.subheader(\"Hello, Python!\")\n    st.markdown(\"In this section, we'll start with a classic \\\"Hello, World!\\\" program. This simple program\" \\\n                \"will introduce you to the basic structure of Python code and how to run it.\")\n    st.markdown(\"\\t - We'll guide you through the process of writing your first Python program that displays \\\"Hello, \"\n                \"World!\\\" on the screen.\")\n    st.markdown(\"To create a file, open any code editor (IDE or terminal) environment you have. Create a new Python \"\n                \"file called \\\"hello_world.py\\\" In this file you will want to code the following, don't worry we will \"\n                \"explain it later.\")\n    st.code(\"if __name__ == \\\"__main__\\\":\\n\"\n            \"\\tprint(\\\"Hello, World!\\\")\", language='python')\n    st.markdown(\"After writing your first program, choose which way you want to run it. If you are writing code in \"\n                \"the terminal \"\n                \"you would use the \\\"python3 hello_world.cpp\\\" command. Whatever way you run it, the result of the \"\n                \"program should be:\")\n    st.code(\"Hello, World!\", language='python')\n    question1 = st.radio(\"What would hello_world.py output?\", (\"Hello, World!\", \"Hello, Python\", \"Hello\", \"Bye\"),\n                         index=None)\n    if question1 == \"Hello, World!\":\n        st.markdown(\"Correct!\")\n        if st.button(\"Next Section\"):\n            st.session_state.expandtitle = \"Unit 1.2\"\n    elif question1 == \"Hello, Python\" or question1 == \"Hello\" or question1 == \"Bye\":\n        st.markdown(\"Try Again!\")\n\n\nelif st.session_state.expandtitle == \"Unit 1.2\":\n    st.header(\"Unit 1.2: Syntax and Formatting Conventions\")\n    st.divider()\n    st.subheader(\"A Python file being formatted improperly or having inappropriately named components will cause it to \"\n                \"not function.\")\n    st.divider()\n    st.subheader(\"Syntax Errors\")\n    st.markdown(\"The most errors you will face as you program will be syntax errors. Even if your logic \"\n                \"is sound, if you spell something incorrectly your program will not function. Computers are good at \"\n                \"following instructions but mistakes as minor as writing rint(“Hello”) instead of print(“Hello”) will \"\n                \"trip up the computer.\")\n    st.subheader(\"Indentation\")\n    st.markdown(\"Indentation indicates a line/block of code is related to the non-indented code directly above it. \"\n                \"The following code will not work due to the unnecessary indent\")\n    st.code(\"print(\\\"“Hi.\\\")\\n\\tprint(\\\"Hi.\\\")\", language='python')\n    st.markdown(\"Ensure you include the correct spelling, spacing, indents, and within your code. Starting in unit 3 \"\n                \"cases where indentation is required will appear.\")\n    options = [\"print(\\\"Goodmorning!\\\")\", \"print(\\'Goodmorning!\\\")\", \"print(Goodmorning!)\", \"print(\\'Goodmorning!\\')\"]\n    answers = [\"print(\\\"Goodmorning!\\\")\", \"print(\\'Goodmorning!\\')\"]\n    wrongAnswers = [\"print(Goodmorning!)\", \"print(\\'Goodmorning!\\\")\"]\n    question2 = st.multiselect(\"Which two print statements would output: Goodmorning!\", options,\n                         default=None)\n    if (question2[0] in answers) and (question2[1] in answers) and (question2[0] != question2[1]):\n        st.markdown(\"Correct!\")\n        if st.button(\"Next Section\"):\n            st.session_state.expandtitle = \"Unit 1.3\"\n    elif (question2[0] in wrongAnswers) or (question2[1] in wrongAnswers) or (question2[0] == question2[1]):\n        st.markdown(\"Try Again!\")\n\n\n\n\n\nelif st.session_state.expandtitle == \"Unit 1.3\":\n    st.header(\"Unit 1.3: Variables\")\n    # Add content for Unit 1.3\n\nelif st.session_state.expandtitle == \"Unit 1.4\":\n    st.header(\"Unit 1.4: Inputs and Outputs\")\n    # Add content for Unit 1.4\n\nelif st.session_state.expandtitle == \"Unit 1.5\":\n    st.header(\"Unit 1.5: Summary\")\n    # Add content for Unit 1.5\n\nelif st.session_state.expandtitle == \"Unit 4.1\":\n    st.header(\"Unit 4.1:\")\n    # Add content for Unit 4.1\n\nelif st.session_state.expandtitle == \"Cheatsheet\":\n    st.header(\"Cheatsheet\")\n    # Add content for Cheatsheet\n\nelif st.session_state.expandtitle == \"Flashcards\":\n    st.header(\"Flashcards\")\n    # Add content for Flashcards\n\nelif st.session_state.expandtitle == \"Home\":\n    st.header(\"Home\")\n    # Add content for Home\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c0b9899114617d2e3cf03e219520335963d0c673)
+++ b/main.py	(date 1695526644448)
@@ -1,4 +1,5 @@
 import streamlit as st
+from account import account_manager
 
 st.set_page_config(
     page_title="py.EDU",
@@ -17,6 +18,9 @@
 
 
 with st.sidebar:
+
+    account_manager()
+
     "Select:"
     if st.button("Home",use_container_width=True):
         st.session_state.expandtitle = "Home"
Index: account.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\n\ndef account():\n\n    user_credentials = {}\n\n    st.title(\"Account\")\n\n    if st.button(\"Sign Up\"):\n        create_credentials(user_credentials)\n\n    if st.button(\"Login\"):\n\n        login()\n        user_info = login()\n        check_credentials(user_info[0], user_info[1], user_credentials)\n\n        #while flag:\n\n        if check_credentials(user_info[0], user_info[1], user_credentials):\n            st.success(\"Access granted\")\n            #flag = False\n        else:\n            st.error(\"Access denied, Try Again\")\n            login()\n\n\ndef create_credentials(credentials):\n\n     #Asks user for their info\n    with st.form('Account Creation'):\n        username = (st.text_input(\"Enter a username for your account: \"))\n        password = (st.text_input(\"Enter a password for your account (8 characters or numbers): \", type=\"password\"))\n        st.form_submit_button(\"Sign Up!\")\n\n     #stores user info in dictionary and returns dictionary\n    credentials[username] = password\n    return credentials\n\n\ndef login():\n\n    cred_list = []\n    st.header('Log-In')\n    the_username = (st.text_input(\"Username: \"))\n    the_password = (st.text_input(\"Password: \", type=\"password\"))\n    st.button(\"Log In!\")\n\n    cred_list.append(the_username)\n    cred_list.append(the_password)\n\n    return cred_list\n\n\ndef check_credentials(username, password, credentials):\n    \"\"\"\n    Using dictionary of account information, checks to see if user exists\n    when logging in\n    \"\"\"\n\n    if username in credentials and (credentials[username] == password):\n        return True\n    elif (username in credentials) and (credentials[username] != password):\n        st.warning(\"Incorrect password, try again.\")\n        return False\n    elif username not in credentials:\n        st.warning(\"Username incorrect, try again or Create Account.\")\n        return False\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account.py b/account.py
--- a/account.py	(revision c0b9899114617d2e3cf03e219520335963d0c673)
+++ b/account.py	(date 1695526644441)
@@ -1,15 +1,16 @@
 import streamlit as st
 
+"""
 def account():
 
     user_credentials = {}
 
     st.title("Account")
-
+    login_button = st.button("Login")
     if st.button("Sign Up"):
         create_credentials(user_credentials)
 
-    if st.button("Login"):
+    if login_button:
 
         login()
         user_info = login()
@@ -51,12 +52,13 @@
 
     return cred_list
 
-
+"""
+"""
 def check_credentials(username, password, credentials):
-    """
+    
     Using dictionary of account information, checks to see if user exists
     when logging in
-    """
+    
 
     if username in credentials and (credentials[username] == password):
         return True
@@ -67,3 +69,66 @@
         st.warning("Username incorrect, try again or Create Account.")
         return False
 
+
+
+def data_collection(num_correct, num_attempts, benchmark):
+    
+    progress_list = []
+    access = False
+    average_progress = num_correct // num_attempts
+    
+    if average_progress > benchmark:
+        access = True
+        progress_list.append(average_progress)
+        progress_list.append(access)
+        return progress_list
+    else:
+        access = False
+        progress_list.append(average_progress)
+        progress_list.append(access)
+        return progress_list
+    
+
+
+"""
+def account_manager():
+    # Define a dictionary to store usernames and passwords
+    user_credentials = {
+        "user1": "password1",
+        "user2": "password2",
+        "user3": "password3"
+    }
+
+    # Streamlit app title
+    st.title("Simple Username/Password Authentication")
+
+    # Streamlit sidebar for login and user creation
+    with st.sidebar:
+        st.header("Login")
+        username = st.text_input("Username")
+        password = st.text_input("Password", type="password")
+
+        st.header("Create User")
+        new_username = st.text_input("New Username")
+        new_password = st.text_input("New Password", type="password")
+        create_user = st.button("Create User")
+
+    # Streamlit main content
+    if st.sidebar.button("Login"):
+        if username in user_credentials and user_credentials[username] == password:
+            st.success("Access granted!")
+        else:
+            st.error("Access denied. Please check your username and password.")
+
+    if create_user:
+        create_new_user(new_username, new_password, user_credentials)
+
+# Function to create a new user
+def create_new_user(username, password, user_credentials):
+    if username and password:
+        user_credentials[username] = password
+        st.success(f"User '{username}' has been created.")
+    else:
+        st.warning("Please provide both a username and a password for user creation.")
+
+
