Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\nfrom PIL import Image\n\nst.set_page_config(page_title=\"py.EDU\", page_icon=\":snake:\", layout=\"wide\", initial_sidebar_state=\"auto\",\n                   menu_items=None)\nst.header(\":blue[py]:red[EDU]:snake:\")\nexpandtitle = None\ncomplete = False\nif st.button(\"Cheatsheet\"):\n    expandtitle = \"Cheatsheet\"\n\nwith st.sidebar:\n    \"Select:\"\n    with st.expander(\"Practice Tools\"):\n        if st.button(\"Flashcard Maker\"):\n            expandtitle = \"Flashcards\"\n    with st.expander(\"Unit 1\"):\n        if st.button(\"Unit 1.1: Python Introduction\"):\n            expandtitle = \"Unit 1.1\"\n        if st.button(\"Unit 1.2: Syntax and Formatting Conventions\"):\n            expandtitle = \"Unit 1.2\"\n        if st.button(\"Unit 1.3: Variables\"):\n            expandtitle = \"Unit 1.3\"\n        if st.button(\"Unit 1.4: Inputs and Outputs\"):\n            expandtitle = \"Unit 1.4\"\n        if st.button(\"Unit 1.5: Summary\"):\n            expandtitle = \"Unit 1.5\"\n\n    with st.expander(\"Unit 4\"):\n        if st.button(\"Unit 4.1\"):\n            expandtitle = \"Unit 4.1\"\n\nif expandtitle == \"Unit 1.1\":\n    st.header(\"Unit 1.1: Introduction to Python\")\n    st.divider()\n    st.markdown(\"In this introductory chapter, we'll take our first steps \"\n                \"into the world of Python programming. Python is a versatile\"\n                \" and beginner-friendly programming language known for its simplicity\"\n                \" and readability. By the end of this chapter, you'll have written your\"\n                \" first Python program and gained insight into the wide range of applications \"\n                \"Python can be used for.\")\n    st.divider()\n    st.subheader(\"Hello, Python!\")\n    st.markdown(\"In this section, we'll start with a classic \\\"Hello, World!\\\" program. This simple program\" \\\n                \"will introduce you to the basic structure of Python code and how to run it.\")\n    st.markdown(\"\\t - We'll guide you through the process of writing your first Python program that displays \\\"Hello, \"\n                \"World!\\\" on the screen.\")\n    st.markdown(\"To create a file, open any code editor (IDE or terminal) environment you have. Create a new Python \"\n                \"file called \\\"hello_world.py\\\" In this file you will want to code the following, don't worry we will \"\n                \"explain it later.\")\n    st.code(\"if __name__ == \\\"__main__\\\":\\n\"\n            \"\\tprint(\\\"Hello, World!\\\")\", language='python')\n    st.markdown(\"After writing your first program, choose which way you want to run it. If you are writing code in \"\n                \"the terminal \"\n                \"you would use the \\\"python3 hello_world.cpp\\\" command. Whatever way you run it, the result of the \"\n                \"program should be:\")\n    st.code(\"Hello, World!\", language='python')\n    yorno = st.radio(\"Which of the following \",\n                     [\":green[Yes]\", \"No\"],\n                     index=None)\n    if yorno != \":green[Yes]\":\n        pass\n    else:\n        expandtitle = \"Unit 1.2\"\n        complete = True\n\nelif expandtitle == \"Unit 1.2\":\n    complete = False\n    st.header(\"Unit 1.2: Syntax and Formatting Conventions\")\nelif expandtitle == \"Unit 1.3\":\n    st.header(\"Unit 1.3: Variables\")\nelif expandtitle == \"Unit 1.4\":\n    st.header(\"Unit 1.4: Inputs and Outputs\")\nelif expandtitle == \"Unit 1.5\":\n    st.header(\"Unit 1.5: Summary\")\nelif expandtitle == \"Unit 4.1\":\n    st.header(\"Unit 4.1: \")\nelif expandtitle == \"Cheatsheet\":\n    st.header(\"Cheatsheet\")\nelif expandtitle == \"Flashcards\":\n    st.header(\"Flashcards\")\n    #start your code here\nelse:\n    st.header(\"Home\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision d3ab8de075363a973f28e6e4d5430734047b0d1f)
+++ b/main.py	(date 1695515111798)
@@ -1,6 +1,21 @@
 import streamlit as st
+from account import account
 from PIL import Image
 
+st.markdown(
+    """
+    <style>
+        .sidebar .sidebar-content {
+            position: sticky;
+            top: 0;
+            z-index: 2;
+        }
+    </style>
+    """,
+    unsafe_allow_html=True
+)
+account()
+
 st.set_page_config(page_title="py.EDU", page_icon=":snake:", layout="wide", initial_sidebar_state="auto",
                    menu_items=None)
 st.header(":blue[py]:red[EDU]:snake:")
Index: account.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\n\ndef account():\n\n    user_credentials = {}\n    flag = True\n\n    st.title(\"Account\")\n\n    if (st.button(\"Sign Up\")):\n        create_credentials(user_credentials)\n\n    if (st.button(\"Login\")):\n\n        login()\n        user_info = login()\n        check_credentials(user_info[0], user_info[1], user_credentials)\n\n        while flag:\n\n            if check_credentials(user_info[0], user_info[1], user_credentials):\n                st.success(\"Access granted\")\n                flag = False\n            else:\n                st.error(\"Access denied, Try Again\")\n                login()\n\n\ndef create_credentials(credentials):\n\n    # Asks user for their info\n    with st.form(key='Account Creation'):\n        username = (st.text_input(\"Enter a username for your account: \", \"Type here...\"))\n        password = (st.text_input(\"Enter a password for your account (8 characters or numbers): \", \"Type here...\"))\n        st.form_submit_button(\"Sign Up!\")\n    # stores user info in dictionary and returns dictionary\n    credentials[username] = password\n    return credentials\n\n\ndef login():\n\n    cred_list = []\n    with st.form(key='Log-In'):\n        username = (st.text_input(\"Enter the username for your account: \", \"Type here...\"))\n        password = (st.text_input(\"Enter the password for your account: \", \"Type here...\"))\n        st.form_submit_button(\"Log In!\")\n\n    cred_list.append(username)\n    cred_list.append(password)\n\n    return cred_list\n\ndef check_credentials(username, password, credentials):\n    \"\"\"\n    Using dictionary of account information, checks to see if user exists\n    when logging in\n    \"\"\"\n\n    if username in credentials and (credentials[username] == password):\n        return True\n    elif (username in credentials) and (credentials[username] != password):\n        st.warning(\"Incorrect password, try again.\")\n        return False\n    elif username not in credentials:\n        st.warning(\"Username incorrect, try again or Create Account.\")\n        return False\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account.py b/account.py
--- a/account.py	(revision d3ab8de075363a973f28e6e4d5430734047b0d1f)
+++ b/account.py	(date 1695515306307)
@@ -1,5 +1,6 @@
 import streamlit as st
 
+
 def account():
 
     user_credentials = {}
@@ -7,10 +8,10 @@
 
     st.title("Account")
 
-    if (st.button("Sign Up")):
+    if st.sidebar.button("Sign Up"):
         create_credentials(user_credentials)
 
-    if (st.button("Login")):
+    if st.sidebar.button("Login"):
 
         login()
         user_info = login()
@@ -31,7 +32,7 @@
     # Asks user for their info
     with st.form(key='Account Creation'):
         username = (st.text_input("Enter a username for your account: ", "Type here..."))
-        password = (st.text_input("Enter a password for your account (8 characters or numbers): ", "Type here..."))
+        password = (st.text_input("Enter a password for your account (8 characters or numbers): ", type="password"))
         st.form_submit_button("Sign Up!")
     # stores user info in dictionary and returns dictionary
     credentials[username] = password
@@ -43,7 +44,7 @@
     cred_list = []
     with st.form(key='Log-In'):
         username = (st.text_input("Enter the username for your account: ", "Type here..."))
-        password = (st.text_input("Enter the password for your account: ", "Type here..."))
+        password = (st.text_input("Enter the password for your account: ", type="password"))
         st.form_submit_button("Log In!")
 
     cred_list.append(username)
@@ -51,6 +52,7 @@
 
     return cred_list
 
+
 def check_credentials(username, password, credentials):
     """
     Using dictionary of account information, checks to see if user exists
@@ -65,4 +67,3 @@
     elif username not in credentials:
         st.warning("Username incorrect, try again or Create Account.")
         return False
-
