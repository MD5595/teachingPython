Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\nimport math\nimport random\nfrom account import account_manager\n\n\nst.set_page_config(\n    page_title=\"EDUpy\",\n    page_icon=\":snake:\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\",\n    menu_items=None\n)\nst.header(\":blue[EDU]:red[py]:snake:\")\n\n\nif 'expandtitle' not in st.session_state:\n    st.session_state.expandtitle = \"Home\"\n\n\n\n\n\nwith st.sidebar:\n    account_manager()\n    container = st.container()\n\n    \"Select:\"\n    if st.button(\"Home\",use_container_width=True):\n        st.session_state.expandtitle = \"Home\"\n\n    with st.expander(\"Practice Tools\"):\n        if st.button(\"Flashcard Maker\", use_container_width=True):\n            st.session_state.expandtitle = \"Flashcards\"\n    with st.expander(\"Unit 1\"):\n        if st.button(\"Unit 1.1: Python Introduction\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 1.1\"\n        if st.button(\"Unit 1.2: Syntax and Formatting Conventions\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 1.2\"\n        if st.button(\"Unit 1.3: Variables\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 1.3\"\n        if st.button(\"Unit 1.4: Inputs and Outputs\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 1.4\"\n        if st.button(\"Unit 1 Summary\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 1.5\"\n    with st.expander(\"Unit 2\"):\n        if st.button(\"Unit 2.1: Basic Symbols\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 2.1\"\n        if st.button(\"Unit 2.2: Order of Operations\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 2.2\"\n        if st.button(\"Unit 2.3: Modulo\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 2.3\"\n        if st.button(\"Unit 2 Summary\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 2.4\"\n        if st.button(\"Unit 2 Quiz\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 2.5\"\n    with st.expander(\"Unit 3\"):\n        if st.button(\"Unit 3.1: If Statements\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 3.1\"\n        if st.button(\"Unit 3.2: Else Statements\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 3.2\"\n        if st.button(\"Unit 3.3: Elif Statements\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 3.3\"\n        if st.button(\"Unit 3.4: Nested Conditionals\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 3.4\"\n        if st.button(\"Unit 3 Summary\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 3.5\"\n        if st.button(\"Unit 3 quiz\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 3.6\"\n    with st.expander(\"Unit 4\"):\n        if st.button(\"Unit 4.1: For-Loops\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 4.1\"\n        if st.button(\"Unit 4.2: While Loops\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 4.2\"\n        if st.button(\"Unit 4.3: Nested Loops\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 4.3\"\n        if st.button(\"Unit 4 Summary\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 4.4\"\n        if st.button(\"Unit 4 Quiz\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 4.5\"\n    with st.expander(\"Unit 5\"):\n        if st.button(\"Unit 5.1: Lists\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 5.1\"\n        if st.button(\"Unit 5.2: Traversing Through Lists\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 5.2\"\n        if st.button(\"Unit 5.3: Appending/Removing\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 5.3\"\n        if st.button(\"Unit 5.4: 2D-Lists\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 5.4\"\n        if st.button(\"Unit 5 Summary\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 5.5\"\n        if st.button(\"Unit 5 quiz\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 5.6\"\n    with st.expander(\"Unit 6\"):\n        if st.button(\"Unit 6.1: Function Declaration\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 6.1\"\n        if st.button(\"Unit 6.2: Parameters\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 6.2\"\n        if st.button(\"Unit 6.3: Returning Values in Functions\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 6.3\"\n        if st.button(\"Unit 6 Summary\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 6.4\"\n        if st.button(\"Unit 6 Quiz\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 6.5\"\n    with st.expander(\"Finals\"):\n        if st.button(\"Recap\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 7.1\"\n        if st.button(\"Final Exam\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 7.2\"\n        if st.button(\"Final Project\", use_container_width=True):\n            st.session_state.expandtitle = \"Unit 7.3\"\n\n\n\n\nif st.session_state.expandtitle == \"Unit 1.1\":\n    st.header(\"Unit 1.1: Introduction to Python\")\n    st.divider()\n    st.markdown(\"In this introductory chapter, we'll take our first steps \"\n                \"into the world of Python programming. Python is a versatile\"\n                \" and beginner-friendly programming language known for its simplicity\"\n                \" and readability. By the end of this chapter, you'll have written your\"\n                \" first Python program and gained insight into the wide range of applications \"\n                \"Python can be used for.\")\n    st.divider()\n    st.subheader(\"Hello, Python!\")\n    st.markdown(\"In this section, we'll start with a classic \\\"Hello, World!\\\" program. This simple program\" \\\n                \"will introduce you to the basic structure of Python code and how to run it.\")\n    st.markdown(\"\\t - We'll guide you through the process of writing your first Python program that displays \\\"Hello, \"\n                \"World!\\\" on the screen.\")\n    st.markdown(\"To create a file, open any code editor (IDE or terminal) environment you have. Create a new Python \"\n                \"file called \\\"hello_world.py\\\" In this file you will want to code the following, don't worry we will \"\n                \"explain it later.\")\n    st.code(\"if __name__ == \\\"__main__\\\":\\n\"\n            \"\\tprint(\\\"Hello, World!\\\")\", language='python')\n    st.markdown(\"After writing your first program, choose which way you want to run it. If you are writing code in \"\n                \"the terminal \"\n                \"you would use the \\\"python3 hello_world.cpp\\\" command. Whatever way you run it, the result of the \"\n                \"program should be:\")\n    st.code(\"Hello, World!\", language='python')\n    question1 = st.radio(\"What would hello_world.py output?\", (\"Hello, World!\", \"Hello, Python\", \"Hello\", \"Bye\"),\n                         index=None)\n    if question1 == \"Hello, World!\":\n        st.markdown(\"Correct!\")\n        if st.button(\"Next Section\"):\n            st.session_state.expandtitle = \"Unit 1.2\"\n    elif question1 == \"Hello, Python\" or question1 == \"Hello\" or question1 == \"Bye\":\n        st.markdown(\"Try Again!\")\n\n\nelif st.session_state.expandtitle == \"Unit 1.2\":\n    st.header(\"Unit 1.2: Syntax and Formatting Conventions\")\n    st.divider()\n    st.subheader(\"A Python file being formatted improperly or having inappropriately named components will cause it to \"\n                \"not function.\")\n    st.divider()\n    st.subheader(\"Syntax Errors\")\n    st.markdown(\"The most errors you will face as you program will be syntax errors. Even if your logic \"\n                \"is sound, if you spell something incorrectly your program will not function. Computers are good at \"\n                \"following instructions but mistakes as minor as writing rint(“Hello”) instead of print(“Hello”) will \"\n                \"trip up the computer.\")\n    st.subheader(\"Indentation\")\n    st.markdown(\"Indentation indicates a line/block of code is related to the non-indented code directly above it. \"\n                \"The following code will not work due to the unnecessary indent\")\n    st.code(\"print(\\\"“Hi.\\\")\\n\\tprint(\\\"Hi.\\\")\", language='python')\n    st.markdown(\"Ensure you include the correct spelling, spacing, indents, and within your code. Starting in unit 3 \"\n                \"cases where indentation is required will appear.\")\n    question2 = st.radio(\"Which two print statements would output: Goodmorning!\",\n                         (\"print(\\\"Goodmorning!\\')\", \"print(Goodmorning!\\\")\", \"print(\\\"Goodmorning!\\\")\", \"print(\\\"Goodmorning!)\"),\n                         index=None,\n                        )\n\n    if (question2 == \"print(\\\"Goodmorning!\\\")\"):\n        st.markdown(\"Correct!\")\n        if st.button(\"Next Section\"):\n            st.session_state.expandtitle = \"Unit 1.3\"\n    elif question2 == \"print(\\\"Goodmorning!\\')\" or question2 == \"print(Goodmorning!\\\")\" or question2 == \"print(\\\"Goodmorning!)\":\n        st.markdown(\"Try Again!\")\n\n\n\n\n\nelif st.session_state.expandtitle == \"Unit 1.3\":\n    st.title(\"Variable Explanation App\")\n\n    # Explanations\n    st.write(\"\"\"\n    Variables are values or characters that are stored within a phrase. Some of the data types that variables can store are strings (any characters placed within “ “), integers (any whole number), and floats (numbers with decimal places).\n\n    Making a variable and giving it a value is called variable declaration. Some examples are shown below:\n    \"\"\")\n    st.code(\"A = 28\\nMy_name = 'John'\\nNumber1 = 1\\n_car_ = 'F-150'\", language='python')\n\n    st.write(\"\"\"\n    Note the use of an equal sign to assign values to the variables. In Unit 3.1 we will go over Python’s equal symbol.\n\n    By using variables we can label information using names that allow code to be clear.\n    \"\"\")\n\n    # Code for a program\n    st.write(\"\"\"\n    Below is the code for a program.\n    \"\"\")\n    st.code(\n        \"import random\\n\"\n        \"\\n\"\n        \"num1 = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\\n\"\n        \"animal = random.choice(['Cow', 'Pig', 'Sheep', 'Dog', 'Whale'])\\n\"\n        \"\\n\"\n        \"your_random_password = str(animal) + str(num1)\\n\"\n        \"print(your_random_password)\",\n        language='python'\n    )\n\n    st.write(\"\"\"\n    Even if you don’t understand some parts such as random.choice and str(), you can reasonably figure out that this is the code for a random password generator. As you progress through this course you will find out that it is not hard to get lost when overlooking code you are currently working on. By having appropriately named variables you will reduce the time you spend rereading your code to regain understanding of it.\n    \"\"\")\n\n    # Code with non-descriptive names\n    st.write(\"\"\"\n    Below is the same code but with non-descriptive names.\n    \"\"\")\n    st.code(\n        \"import random\\n\"\n        \"\\n\"\n        \"dwq = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\\n\"\n        \"ejd = random.choice(['Cow', 'Pig', 'Sheep', 'Dog', 'Whale'])\\n\"\n        \"\\n\"\n        \"qua = str(ejd) + str(dwq)\\n\"\n        \"print(qua)\",\n        language='python'\n    )\n\n    st.write(\"\"\"\n    As you can see, this code is much harder to understand compared to its descriptive version.\n    \"\"\")\n\n    # Variable naming rules\n    st.write(\"\"\"\n    There are some rules tied with variable naming.\n    \"\"\")\n    st.write(\"**Variable Naming Rules:**\")\n    st.write(\"- Variables must start with a letter or underscore.\")\n    st.write(\"- Variables can only contain the letters/symbols A-Z, 0-9, and _.\")\n    st.write(\"- Variables with different capitalization are different, even if the spelling is the same.\")\n    st.write(\"- When making a variable that holds a word, ' ' must be used.\")\n    st.write(\"- Variables cannot have the same name as keywords.\")\n\n    # Examples of incorrect variable names\n    st.write(\"\"\"\n    Some examples of incorrect variable names, along with reasoning as to why the code is incorrect.\n    \"\"\")\n    st.code(\"\", language='python')\n    st.code(\"\", language='python')\n    st.code(\"\", language='python')\n    st.code(\"\", language='python')\n\n    st.write(\"\"\"\n    Making your variables descriptive is vital to creating readable code that is easily decipherable.\n    \"\"\")\n #Question for 1.3\n    question3 = st.radio(\"What would hello_world.py output?\", (\"variable = 42\", \"42 = variable\", \"variable == 42\", \"variable: 42\"),\n                         index=None, key=\"q3\")\n    if question3 == \"variable = 42\":\n        st.markdown(\"Correct!\")\n        if st.button(\"Next Section\"):\n            st.session_state.expandtitle = \"Unit 1.4\"\n    elif question3 == \"42 = variable\" or question3 == \"variable == 42\" or question3 == \"variable: 42\":\n        st.markdown(\"Try Again!\")\n\n\n\n\n\nelif st.session_state.expandtitle == \"Unit 1.4\":\n    st.header(\"Unit 1.4: Inputs and Outputs\")\n    st.divider()\n    st.subheader(\"Printing Variables\")\n    st.markdown(\"As Unit 1.1 showed, code you write can be displayed on the console by utilizing print() functions.\")\n    st.markdown(\"If you want to print a number or the contents of a variable, you simply place the number/variable \"\n                \"inside the parentheses as shown below.\")\n    st.code(\"Name = \\\"Jesse\\\"\\n\"\n            \"print(Name)\\n\"\n            \"print(16)\", language='python')\n    st.markdown(\"Output:\")\n    st.code(\"Jesse\\n\"\n            \"16\", language='python')\n\n    st.subheader(\"Printing Statements\")\n    st.markdown(\"When printing a statement, you surround your text with quotation marks.\")\n    st.code(\"print(\\\"Hello, it’s nice to meet you.\\\")\", language='python')\n    st.markdown(\"Output:\")\n    st.code(\"Hello, it’s nice to meet you.\", language='python')\n\n    st.subheader(\"User Inputs\")\n    st.markdown(\"Oftentimes, you will be required to make your programs interactive. This will be done by utilizing \"\n                \"the input() function. A variable will be assigned the text that the user inputs.\")\n    st.code(\"Age = input(\\\"Input your age: \\\")\\n\"\n            \"print(\\\"You are \\\" + Age)\", language='python')\n    st.markdown(\"Example:\")\n    st.code(\"Input your age: 17\\n\"\n            \"You are 17\", language='python')\n\n    st.subheader(\"Working with Numeric Inputs\")\n    st.markdown(\"Inputs are automatically seen as words/text. In order to have an input that’s a number be seen as \"\n                \"one by the computer, which would allow the variable the input is assigned to partake in math \"\n                \"equations, the int() function must be used.\")\n    st.code(\"Age = int(input(\\\"Input your age: \\\"))\\n\"\n            \"Age_plus_ten = Age + 10\\n\"\n            \"print(\\\"You will be \\\" + str(Age_plus_ten) + \\\" in 10 years.\\\")\", language='python')\n    st.markdown(\"Example:\")\n    st.code(\"Input your age: 17\\n\"\n            \"You will be 27 in 10 years.\", language='python')\n    question3 = st.radio(\"What is the purpose of the str() function in the last example?\",\n                         (\"Converts the Age variable to an integer\",\n                          \"Converts the Age_plus_ten variable to an integer\",\n                          \"Converts the result of the Age_plus_ten expression to a string\",\n                          \"Converts the Age_plus_ten variable to a string\"),\n                         index=None,\n                         key=\"q3\"\n                         )\n\n    if (question3 == \"Converts the result of the Age_plus_ten expression to a string\"):\n        st.markdown(\"Correct!\")\n        if st.button(\"Next Section\"):\n            st.session_state.expandtitle = \"Unit 1.5\"\n    elif(question3 == \"Converts the Age variable to an integer\"\n    or question3 == \"Converts the Age_plus_ten variable to an integer\"\n    or question3 == \"Converts the Age_plus_ten variable to a string\"):\n        st.markdown(\"Try Again!\")\n\nelif st.session_state.expandtitle == \"Unit 1.5\":\n    st.header(\"Unit 1 Summary\")\n    st.title(\"Data Types Explanation\")\n\n    # Create a 2x4 table to display data types\n    st.write(\"\"\"\n    | Data Type | Description      |\n    |-----------|------------------|\n    | String    | Text type        |\n    | Integer   | Number type      |\n    | Float     | Number type      |\n    | List      | Sequence type    |\n    | Boolean   | Boolean type     |\n    \"\"\")\n\n    # Explanation of data types\n    st.write(\"\"\"\n    In some programming languages, you must specify the data type of a variable when you declare it. However, in Python, the data type is automatically determined based on the value you assign to the variable.\n\n    Here are all the data types that this course will go over:\n    - **String**: Text type\n    - **Integer**, **Float**: Number type\n    - **List**: Sequence type\n    - **Boolean**: Boolean type\n    \"\"\")\n\n    # Examples of data types\n    st.write(\"Below are some examples:\")\n    st.code(\"Tree = 'Oak'\", language='python')\n    st.code(\"Number1 = 13\", language='python')\n    st.code(\"Float1 = 3.14\", language='python')\n    st.code(\"List1 = ['Iphone', 'Android', 'Google Pixel']\", language='python')\n    st.code(\"Boolean1 = 3 > 8\", language='python')\n\n    st.write(\"\"\"\n    Different data types can be used in different statements. For example, integers, floats, and strings can be added to variables of the same data type, but booleans can't. Also, you can only use the modulus operator with the int and float data types.\n    \"\"\")\n\nelif st.session_state.expandtitle == \"Unit 2.1\":\n    st.title(\"Mathematical Operators Explanation\")\n\n    # Explanation of mathematical operators\n    st.write(\"\"\"\n    Mathematical symbols, which are operators, are used in Python equations.\n    Here are some basic math operators:\n\n    - Addition (+)\n    - Subtraction (-)\n    - Multiplication (*)\n    - Division (/)\n    - Remainder (%): The left number after division\n    - Exponents (**): The base is placed to the left of the symbol while the power is to the right\n    - Floor Division (//): Removes any decimals produced from the division\n    \"\"\")\n\n    # Examples of using mathematical operators\n    st.write(\"\"\"\n    When you want to display the solution to a math problem, you can either assign it to a variable and then print it, directly place the equation in a print statement, or place an equation using variables inside a print statement.\n    \"\"\")\n    num1 = 10 % 3\n    num2 = 3 ** 2\n    num3 = 5 // 2\n    num4 = 2\n    num5 = 14\n\n    st.write(f\"num1 = {num1}\")\n    st.write(f\"num2 = {num2}\")\n    st.write(f\"num3 = {num3}\")\n    st.write(f\"3 // 10 = {3 // 10}\")\n    st.write(f\"num4 / num5 = {num4 / num5}\")\nelif st.session_state.expandtitle == \"Unit 2.2\":\n    # Title of the web app\n    st.title(\"Order of Operations in Python\")\n\n    # Explanation of the order of operations\n    st.write(\"\"\"\n    Whenever a Python program has multiple operators in one line, different parts of the equation will be solved in a specific order.\n\n    Below is the order in which Python operations are processed:\n    1. ()\n    2. **\n    3. *, /, //, %\n    4. +, -\n\n    Once all operators left have the same precedence, the equation will be solved from left to right.\n\n    Let's look at the order of operations in action:\n    \"\"\")\n    equation = \"X = 3*6+3*(6/2)+2**2\"\n    st.code(equation, language='python')\n    st.write(\"print(X)\")\n\n    # Example calculation\n    X = 3 * 6 + 3 * (6 / 2) + 2 ** 2\n    st.write(f\"X = {X}\")\n\n    # Explanation of the calculation\n    st.write(\"\"\"\n    The equation is solved as follows:\n    1. (6/2) = 3\n    2. 2**2 = 4\n    3. 3*6 = 18\n    4. 3*3 = 9\n    5. 18+9 = 27\n    6. 27+4 = 31\n\n    Python does basic math in the same order you would do on paper.\n    \"\"\")\n\nelif st.session_state.expandtitle == \"Unit 2.3\":\n    st.title(\"Modules Explanation\")\n\n    # Explanation of modules\n    st.write(\"\"\"\n    Modules are used to shorten programs by giving the user access to a group of functions. Generally, functions are given a number/text and return a value.\n\n    The two modules this course will have you use are the `math` and `random` modules. To use them, they first have to be imported, then the specific function you want to use has to be called using dot notation. You call a function from a module by saying `module.function`.\n\n    Here are the math functions you will use:\n    \"\"\")\n    st.code(\"import math\\n\"\n            \"X = 2.1\\n\"\n            \"Y = 3\\n\"\n            \"\\n\"\n            \"Num1 = math.ceil(X)  # Rounds X up\\n\"\n            \"Num2 = math.fabs(X)  # Returns the absolute value of X\\n\"\n            \"Num3 = math.floor(X)  # Returns X rounded down\\n\"\n            \"Num4 = math.trunc(X)  # Returns X with the decimal part removed\\n\"\n            \"Num5 = math.pow(X, Y)  # Returns X to the Y power\\n\"\n            \"Num6 = math.sqrt(X)  # Returns the square root of X\\n\"\n            \"Num7 = math.pi  # Returns pi\",\n            language='python')\n\n    st.write(\"\"\"\n    Below are the random functions you will use:\n    \"\"\")\n    st.code(\"import random\\n\"\n            \"\\n\"\n            \"Num1 = random.random()  # Generates a random number from 0-1\\n\"\n            \"Num2 = random.randint(X, Y)  # Returns a random number from X to Y\\n\"\n            \"Num3 = random.choice(['Red', 'Orange', 'Yellow'])  # Picks a random value within a list\",\n            language='python')\n\n    st.write(\"\"\"\n    It will be convenient for you to memorize these functions, but it is no problem if you forget the correct syntax. Consult the cheat sheet or Google to properly type out the functions/modules.\n    \"\"\")\n\n\nelif st.session_state.expandtitle == \"Unit 2.4\":\n    st.header(\"Unit 2 Summary\")\nelif st.session_state.expandtitle == \"Unit 2.5\":\n    st.header(\"Unit 2 Quiz\")\nelif st.session_state.expandtitle == \"Unit 3.1\":\n    st.header(\"Unit 3.1: If Statements\")\n    st.title(\"If-Else Statements, Conditional, and Logical Operators\")\n\n    # Explanation of conditional statements, comparison operators, and logical operators\n    st.write(\"\"\"\n    Conditional statements determine if one or multiple conditions have been met and perform an action based on whether the condition is fulfilled or not.\n\n    Conditional statements use logical operators. Here are the comparison operators:\n    - Greater than (>)\n    - Less than (<)\n    - Equal to (==)\n    - Not equal to (!=)\n    - Greater than or equal to (>=)\n    - Less than or equal to (<=)\n\n    And here are the logical operators:\n    - And (If both statements are true, the condition is fulfilled)\n    - Or (If either condition is true, the condition is fulfilled)\n    - Not (Reverses the Boolean value of a statement)\n\n    Values are compared, and if the statement is true (returning True, a Boolean value), then the code under the condition will get executed.\n\n    Let's see an example using the if statement:\n    \"\"\")\n    st.code(\"x = 15\\n\"\n            \"if x > 10 or x != 10:\\n\"\n            \"    print('Hello')\",\n            language='python')\n\n    st.write(\"\"\"\n    In the code above, the if statement checks if x is greater than 10 or not equal to 10. If the condition is met, it prints 'Hello'.\n\n    Note the indented portion of the code and the colon at the end of the condition that signifies that everything below that is indented only happens if the condition is met.\n\n    If-else statements are similar to if statements, but they allow you to specify an action to perform if the original condition is not fulfilled. Here's an example:\n    \"\"\")\n    st.code(\"x = int(input('Enter a number'))\\n\"\n            \"\\n\"\n            \"if x > 10:\\n\"\n            \"    print('X is greater than 10.')\\n\"\n            \"else:\\n\"\n            \"    print('X is either less than 10')\\n\"\n            \"    print('Or 10.')\",\n            language='python')\n\n    st.write(\"\"\"\n    In this code, we take user input for a number and use if-else statements to check whether it's greater than 10. Depending on the condition, different messages are printed. You can include multiple actions under one condition.\n\n    Conditional statements, comparison operators, and logical operators are fundamental concepts in programming and are essential for making decisions in your code.\n    \"\"\")\nelif st.session_state.expandtitle == \"Unit 3.2\":\n    st.header(\"Unit 3.2: Else Statements\")\n    st.title(\"Else-If Statements (elif) Explanation\")\n\n    # Explanation of else-if statements (elif)\n    st.write(\"\"\"\n    Else-if statements, also known as \"elif\" statements, are used for more complex branching in your code. They allow you to handle multiple conditions and perform different actions depending on which condition is met. \n\n    Here's a more detailed look at else-if statements:\n\n    Else-if statements are used when you have two or more conditions to check, and you want to execute specific code blocks based on those conditions.\n\n    In the following example, we'll create a program that asks for the user's name and greets them differently based on their name:\n    \"\"\")\n    st.code(\"name = input('Enter your name: ')\\n\"\n            \"\\n\"\n            \"if name == 'Tom':\\n\"\n            \"    print('Hi Tom')\\n\"\n            \"elif name == 'John':\\n\"\n            \"    print('Hi John')\\n\"\n            \"elif name == 'June':\\n\"\n            \"    print('Hi June')\\n\"\n            \"else:\\n\"\n            \"    print('Hello')\",\n            language='python')\n\n    st.write(\"\"\"\n    In this code, we first ask the user to enter their name. Then, we use else-if statements (elif) to check multiple conditions. If the user's name matches one of the conditions, a specific greeting is printed. If none of the conditions are met, a default greeting is printed using the else statement.\n\n    Here's a breakdown of the code:\n    - We ask for the user's name using the `input` function.\n    - We use if-elif-else statements to check the name against multiple conditions.\n    - If the name is 'Tom', it prints 'Hi Tom.'\n    - If the name is 'John', it prints 'Hi John.'\n    - If the name is 'June', it prints 'Hi June.'\n    - If none of the conditions are met, it prints 'Hello.'\n\n    You can include as many elif statements as needed to handle various cases.\n\n    Else-if statements are useful for creating complex decision trees in your code, allowing you to execute different actions based on different conditions. They make your code more flexible and capable of handling a wide range of scenarios.\n    \"\"\")\n\n    # More content here (copy and paste the above section to extend it)\n    st.write(\"\"\"\n    Here's another example of using elif statements to determine the season based on the month entered by the user:\n    \"\"\")\n    st.code(\"month = input('Enter the month (e.g., January): ')\\n\"\n            \"\\n\"\n            \"if month == 'December' or month == 'January' or month == 'February':\\n\"\n            \"    print('It's winter.')\\n\"\n            \"elif month == 'March' or month == 'April' or month == 'May':\\n\"\n            \"    print('It's spring.')\\n\"\n            \"elif month == 'June' or month == 'July' or month == 'August':\\n\"\n            \"    print('It's summer.')\\n\"\n            \"elif month == 'September' or month == 'October' or month == 'November':\\n\"\n            \"    print('It's autumn.')\\n\"\n            \"else:\\n\"\n            \"    print('Month not recognized.')\",\n            language='python')\n\n    st.write(\"\"\"\n    In this code, we take the user's input for the month and use elif statements to determine the season. Depending on the entered month, it prints the corresponding season. If the month is not recognized, it prints 'Month not recognized.'\n\n    This demonstrates how elif statements can handle a range of conditions and make your code more comprehensive and adaptable.\n\n    Feel free to use elif statements in your code whenever you need to make decisions based on multiple conditions, as they help structure your logic effectively.\n    \"\"\")\n\n    # More content here (copy and paste the above section to extend it)\n    st.write(\"\"\"\n    Here's a more complex example that uses elif statements to determine the category of a product based on its price:\n    \"\"\")\n    st.code(\"price = float(input('Enter the price of the product: '))\\n\"\n            \"\\n\"\n            \"if price < 10:\\n\"\n            \"    print('Category: Low-cost')\\n\"\n            \"elif price >= 10 and price < 50:\\n\"\n            \"    print('Category: Mid-range')\\n\"\n            \"elif price >= 50 and price < 100:\\n\"\n            \"    print('Category: Premium')\\n\"\n            \"else:\\n\"\n            \"    print('Category: Luxury')\",\n            language='python')\n\n    st.write(\"\"\"\n    In this code, we take the price of a product as input, and based on the price range, we determine its category. If the price is less than 10, it's considered low-cost. If it falls between 10 and 50, it's mid-range, and so on.\n\n    This example illustrates how elif statements can handle more intricate decision-making processes, allowing your code to respond intelligently to various scenarios.\n\n    Else-if statements are a powerful tool for branching logic in your code, making it more versatile and capable of handling complex decision-making tasks.\n    \"\"\")\n\nelif st.session_state.expandtitle == \"Unit 3.3\":\n    st.header(\"Unit 3.3: Nested Conditionals\")\n    st.title(\"Nested If Statements Explanation\")\n\n    # Explanation of nested if statements\n    st.write(\"\"\"\n    Nested if statements are used when you need to evaluate multiple conditions within another condition. This allows for more complex decision-making in your code.\n\n    Nested if statements are essentially if statements inside other if statements. They are used to create hierarchical decision structures, where you check multiple conditions in a structured manner.\n\n    Example 1: Categorizing a product based on price and availability\n    \"\"\")\n    st.code(\"price = float(input('Enter the price of the product: '))\\n\"\n            \"availability = input('Is the product available (yes/no): ')\\n\"\n            \"\\n\"\n            \"if price < 10:\\n\"\n            \"    if availability == 'yes':\\n\"\n            \"        print('Low-cost and available')\\n\"\n            \"    else:\\n\"\n            \"        print('Low-cost but not available')\\n\"\n            \"elif price < 50:\\n\"\n            \"    if availability == 'yes':\\n\"\n            \"        print('Mid-range and available')\\n\"\n            \"    else:\\n\"\n            \"        print('Mid-range but not available')\\n\"\n            \"else:\\n\"\n            \"    if availability == 'yes':\\n\"\n            \"        print('Premium and available')\\n\"\n            \"    else:\\n\"\n            \"        print('Premium but not available')\",\n            language='python')\n\n    st.write(\"\"\"\n    Example 2: Determining a student's grade\n    \"\"\")\n    st.code(\"score = int(input('Enter the student's score: '))\\n\"\n            \"\\n\"\n            \"if score >= 90:\\n\"\n            \"    if score == 100:\\n\"\n            \"        print('Grade: A+ (Perfect score!)')\\n\"\n            \"    else:\\n\"\n            \"        print('Grade: A')\\n\"\n            \"elif score >= 80:\\n\"\n            \"    print('Grade: B')\\n\"\n            \"elif score >= 70:\\n\"\n            \"    print('Grade: C')\\n\"\n            \"elif score >= 60:\\n\"\n            \"    print('Grade: D')\\n\"\n            \"else:\\n\"\n            \"    print('Grade: F (Fail)')\",\n            language='python')\n\n    st.write(\"\"\"\n    Example 3: Checking eligibility for a driving license\n    \"\"\")\n    st.code(\"age = int(input('Enter your age: '))\\n\"\n            \"driving_test = input('Have you passed the driving test (yes/no): ')\\n\"\n            \"\\n\"\n            \"if age >= 18:\\n\"\n            \"    if driving_test == 'yes':\\n\"\n            \"        print('Eligible for a driving license.')\\n\"\n            \"    else:\\n\"\n            \"        print('You need to pass the driving test to be eligible.')\\n\"\n            \"else:\\n\"\n            \"    print('Must be 18 or older to apply for a driving license.')\",\n            language='python')\n\n    st.write(\"\"\"\n    Nested if statements allow you to create complex decision trees in your code, making it capable of handling detailed scenarios effectively.\n    \"\"\")\nelif st.session_state.expandtitle == \"Unit 3.4\":\n    st.header(\"Unit 3.4: Nested Conditionals\")\nelif st.session_state.expandtitle == \"Unit 3.5\":\n    st.header(\"Unit 3 Summary\")\nelif st.session_state.expandtitle == \"Unit 3.6\":\n    st.header(\"Unit 3 Quiz\")\nelif st.session_state.expandtitle == \"Unit 4.1\":\n    st.header(\"Unit 4.1: For Loops\")\nelif st.session_state.expandtitle == \"Unit 4.2\":\n    st.header(\"Unit 4.2: While Loops\")\nelif st.session_state.expandtitle == \"Unit 4.3\":\n    st.header(\"Unit 4.3: Nested Loops\")\nelif st.session_state.expandtitle == \"Unit 4.4\":\n    st.header(\"Unit 4 Summary\")\nelif st.session_state.expandtitle == \"Unit 4.5\":\n    st.header(\"Unit 4 Quiz\")\nelif st.session_state.expandtitle == \"Unit 5.1\":\n    st.header(\"Unit 5.1: Lists\")\nelif st.session_state.expandtitle == \"Unit 5.2\":\n    st.header(\"Unit 5.2: Traversing Through Lists\")\nelif st.session_state.expandtitle == \"Unit 5.3\":\n    st.header(\"Unit 5.3: Appending/Removing\")\nelif st.session_state.expandtitle == \"Unit 5.4\":\n    st.header(\"Unit 5.4: 2-D Lists\")\nelif st.session_state.expandtitle == \"Unit 5.5\":\n    st.header(\"Unit 5 Summary\")\nelif st.session_state.expandtitle == \"Unit 5.6\":\n    st.header(\"Unit 5 Quiz\")\nelif st.session_state.expandtitle == \"Unit 6.1\":\n    st.header(\"Unit 6.1: Function Declaration\")\nelif st.session_state.expandtitle == \"Unit 6.2\":\n    st.header(\"Unit 6.2: Parameters\")\nelif st.session_state.expandtitle == \"Unit 6.3\":\n    st.header(\"Unit 6.3: Returning Values in Functions\")\nelif st.session_state.expandtitle == \"Unit 6.4\":\n    st.header(\"Unit 6 Summary\")\nelif st.session_state.expandtitle == \"Unit 6.5\":\n    st.header(\"Unit 6 Quiz\")\nelif st.session_state.expandtitle == \"Unit 7.1\":\n    st.header(\"Recap\")\nelif st.session_state.expandtitle == \"Unit 7.2\":\n    st.header(\"Final Exam\")\nelif st.session_state.expandtitle == \"Unit 7.3\":\n    st.header(\"Final Project\")\n\n\nelif st.session_state.expandtitle == \"Cheatsheet\":\n    st.header(\"Cheatsheet\")\n    # Add content for Cheatsheet\n\nelif st.session_state.expandtitle == \"Flashcards\":\n    st.header(\"Flashcards\")\n    # Add content for Flashcards\n\nelif st.session_state.expandtitle == \"Home\":\n    st.header(\"Home\")\n    tab1, tab2, tab3 = st.tabs([\"Welcome\", \"Get Started\", \"About Us\"])\n    with tab1:\n        # Header\n        st.title(\"Welcome to eduPY\")\n        st.subheader(\"Your Gateway to Python Education\")\n\n        # Introduction\n        st.write(\n            \"Are you ready to embark on a Python learning journey? Whether you're a beginner taking your first steps \"\n            \"in coding or an experienced developer looking to enhance your skills, eduPY is here to support your \"\n            \"Python education.\")\n\n        # Key Features\n        st.markdown(\"## Key Features\")\n        st.subheader(\"Comprehensive Python Curriculum\")\n        st.write(\"Our comprehensive curriculum covers Python programming from the fundamentals to advanced topics. \"\n                 \"Explore a wide range of Python applications, including data science, web development, and more.\")\n\n        st.subheader(\"Interactive Learning\")\n        st.write(\"Learn by doing with our interactive courses and hands-on coding exercises. Engage with practical \"\n                 \"coding challenges that reinforce your skills.\")\n\n        st.subheader(\"Experienced Instructors\")\n        st.write(\"Benefit from the expertise of our experienced Python instructors. They bring real-world experience \"\n                 \"and a passion for teaching to every lesson.\")\n\n        st.subheader(\"Community and Support\")\n        st.write(\"Join our vibrant learning community. Connect with fellow students, ask questions, and collaborate on \"\n                 \"projects. Our support team is here to assist you on your journey.\")\n\n        st.subheader(\"Flexible Learning Options\")\n        st.write(\"Choose the learning style that suits you best. Whether you prefer self-paced learning or structured \"\n                 \"courses with deadlines, we have options to fit your needs.\")\n\n        # Get Started\n        st.markdown(\"## Get Started\")\n        st.write(\"Ready to begin? Dive into the world of Python programming with eduPY today!\")\n\n        if st.button(\"Start Learning\"):\n            # Redirect to the curriculum page or the first unit\n            st.session_state.expandtitle = \"Unit 1.1\"\n            # You can change the expandtitle value based on where you want to redirect the user\n\n        # About Us\n        st.markdown(\"## About Us\")\n        st.write(\"Learn more about eduPY and our mission to empower learners with Python skills.\")\n\n        if st.button(\"About eduPY\"):\n            st.session_state.expandtitle = \"About eduPY\"\n\n        # Footer\n        st.write(\"Thank you for choosing eduPY. We look forward to helping you achieve your Python programming goals!\")\n    with tab2:\n        # Header\n        st.title(\"Installing Python and PyCharm\")\n        st.subheader(\"Getting Started with Python Development\")\n\n        # Introduction\n        st.write(\n            \"Before you begin your Python programming journey, you'll need to set up your development environment. \"\n            \"This guide will walk you through the process of installing Python and PyCharm, a popular Python IDE.\")\n\n        # Installing Python\n        st.markdown(\"## Installing Python\")\n        st.subheader(\"Step 1: Download Python\")\n        st.write(\"To install Python, you can download the latest version from the official Python website. \"\n                 \"Choose the appropriate installer for your operating system (Windows, macOS, or Linux).\")\n\n        st.subheader(\"Step 2: Run the Installer\")\n        st.write(\"Run the downloaded installer and follow the installation wizard. Be sure to check the box that says \"\n                 \"'Add Python X.X to PATH' (X.X represents the Python version number). This ensures that Python is added \"\n                 \"to your system's PATH environment variable.\")\n\n        st.subheader(\"Step 3: Verify Installation\")\n        st.write(\"To verify that Python has been installed correctly, open a command prompt or terminal and enter the \"\n                 \"following command:\")\n        st.code(\"python --version\", language=\"shell\")\n\n        st.write(\"You should see the Python version displayed, indicating a successful installation.\")\n\n        # Installing PyCharm\n        st.markdown(\"## Installing PyCharm\")\n        st.subheader(\"Step 1: Download PyCharm\")\n        st.write(\n            \"PyCharm is a popular Python IDE developed by JetBrains. You can download the Community edition, which is \"\n            \"free, or the Professional edition for additional features. Visit the PyCharm website to download the installer.\")\n\n        st.subheader(\"Step 2: Run the Installer\")\n        st.write(\"Run the downloaded PyCharm installer and follow the installation instructions. You can choose to \"\n                 \"customize your installation options if desired.\")\n\n        st.subheader(\"Step 3: First Launch\")\n        st.write(\n            \"After installation, launch PyCharm. You'll be prompted to import settings or customize the IDE to your liking. \"\n            \"Follow the setup wizard to configure PyCharm as you prefer.\")\n\n        st.write(\"You're now ready to start coding with Python in PyCharm!\")\n\n        # Next Steps\n        st.markdown(\"## Next Steps\")\n        st.write(\"With Python and PyCharm installed, you're ready to explore the world of Python programming. \"\n                 \"Consider taking our introductory courses to begin your learning journey.\")\n\n        st.link_button(\"Syllabus\", \"https://docs.google.com/document/d/18pOZAv8kwUpfFii0ko1iciQv3-eyxOmcmdLVdaqvjVg/edit?usp=sharing\")\n\n        # Footer\n        st.write(\"Thank you for choosing eduPY. We wish you success in your Python development endeavors!\")\n\n    with tab3:\n        # Header\n        st.title(\"About eduPY\")\n        st.markdown(\"## Welcome to eduPY – Your Gateway to Python Education!\")\n\n        # Introduction\n        st.write(\"At eduPY, we are passionate about spreading the knowledge and power of Python programming \"\n                 \"to learners of all levels, from beginners taking their first steps in coding to seasoned \"\n                 \"developers looking to enhance their skills. Our mission is to make Python education accessible, \"\n                 \"engaging, and effective.\")\n\n        # What Sets Us Apart\n        st.markdown(\"## What Sets Us Apart\")\n        st.subheader(\"Comprehensive Python Curriculum\")\n        st.write(\"We offer a comprehensive curriculum that covers Python programming from the fundamentals \"\n                 \"to advanced topics. Whether you're interested in mastering Python basics, data science, web \"\n                 \"development, or artificial intelligence, our courses have you covered.\")\n\n        st.subheader(\"Interactive Learning\")\n        st.write(\"Learning Python doesn't have to be boring! Our interactive courses and hands-on coding exercises \"\n                 \"keep you engaged and motivated throughout your learning journey. You'll learn by doing, making \"\n                 \"your knowledge practical and immediately applicable.\")\n\n        st.subheader(\"Experienced Instructors\")\n        st.write(\"Our team of experienced Python instructors is dedicated to your success. They bring real-world \"\n                 \"experience and a passion for teaching to every lesson. You'll benefit from their guidance and \"\n                 \"insights as you progress in your Python education.\")\n\n        st.subheader(\"Community and Support\")\n        st.write(\n            \"Join a thriving community of learners who share your passion for Python. Connect with fellow students, \"\n            \"ask questions, and collaborate on projects. Our support team is always here to assist you on your learning path.\")\n\n        st.subheader(\"Flexible Learning Options\")\n        st.write(\n            \"We understand that everyone's learning journey is unique. That's why we offer flexible learning options. \"\n            \"Whether you prefer self-paced learning or structured courses with deadlines, we have options to suit your needs.\")\n\n        # Our Vision\n        st.markdown(\"## Our Vision\")\n        st.write(\n            \"Our vision is to empower individuals with the skills and knowledge they need to excel in the world of Python \"\n            \"programming. We believe that Python is not just a programming language; it's a tool that opens doors to countless \"\n            \"possibilities.\")\n\n        # Get Started\n        st.markdown(\"## Get Started Today!\")\n        st.write(\n            \"Are you ready to embark on your Python learning adventure? Join eduPY today and take your first steps towards \"\n            \"becoming a Python pro! Whether you're looking to build a career in tech, launch a data science project, or \"\n            \"simply explore the world of coding, we're here to support you every step of the way.\")\n\n        st.write(\"Thank you for choosing eduPY. We look forward to helping you achieve your Python programming goals!\")\n\n\n    # Add content for Home\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 1d2fa90860c82c34496e90deaf5b06cd99e958d5)
+++ b/main.py	(date 1695540787823)
@@ -480,6 +480,28 @@
 
 elif st.session_state.expandtitle == "Unit 2.4":
     st.header("Unit 2 Summary")
+    st.write("""
+        | Operator  |   Function                                          |
+        |-----------|-----------------------------------------------------|
+        |    ()     |    Call operator - calls function or method         |
+        |    **     | Exponent operator - raises a value to an exponent   |
+        | *,/,//,%  |    Multiplication - multiplies, Division - divides, |
+        |           |   Floor Division - removes decimal after division,  |
+        |           |  Modulo - Provides remainder after division         |
+        |           |                                                     |
+        |   +, -    | Addition - Adds, Subtraction - subtracts            |
+        """)
+    st.write(" Examples of each: ")
+    st.code(" print('The parentheses help tell what to print')", language='python')
+    st.code(" val = 3 ** 2 #stores 9 in val", language='python')
+    st.code(" val = 3 * 2 #stores 6 in val", language='python')
+    st.code(" val = 3 / 1 #stores 3 in val", language='python')
+    st.code(" val = 3 // 2 #stores 1 in val (cuts off the .5 in 1.5)", language='python')
+    st.code(" val = 3 % 2 #stores 1 in val because 3/2 is 1 remainder 1", language='python')
+    st.code(" val = 3 + 2 #stores 5 in val", language='python')
+    st.code(" val = 3 - 2 #stores in 1", language='python')
+    st.write(" These operators, in order of highest precedence to lowest, make up the majority of arithmetic operators used in python")
+
 elif st.session_state.expandtitle == "Unit 2.5":
     st.header("Unit 2 Quiz")
 elif st.session_state.expandtitle == "Unit 3.1":
@@ -534,7 +556,7 @@
     Conditional statements, comparison operators, and logical operators are fundamental concepts in programming and are essential for making decisions in your code.
     """)
 elif st.session_state.expandtitle == "Unit 3.2":
-    st.header("Unit 3.2: Else Statements")
+    st.header("Unit 3.2: Elif Statements")
     st.title("Else-If Statements (elif) Explanation")
 
     # Explanation of else-if statements (elif)
@@ -696,10 +718,8 @@
     Nested if statements allow you to create complex decision trees in your code, making it capable of handling detailed scenarios effectively.
     """)
 elif st.session_state.expandtitle == "Unit 3.4":
-    st.header("Unit 3.4: Nested Conditionals")
-elif st.session_state.expandtitle == "Unit 3.5":
     st.header("Unit 3 Summary")
-elif st.session_state.expandtitle == "Unit 3.6":
+elif st.session_state.expandtitle == "Unit 3.5":
     st.header("Unit 3 Quiz")
 elif st.session_state.expandtitle == "Unit 4.1":
     st.header("Unit 4.1: For Loops")
Index: account.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\n\ndef account_manager():\n    # Define a dictionary to store usernames and passwords\n    user_credentials = {\n        \"user1\": \"password1\",\n        \"user2\": \"password2\",\n        \"user3\": \"password3\"\n    }\n\n    # Streamlit app title\n    st.title(\"Simple Username/Password Authentication\")\n\n    # Streamlit sidebar for login and user creation\n    with st.sidebar:\n        st.header(\"Login\")\n        username = st.text_input(\"Username\")\n        password = st.text_input(\"Password\", type=\"password\")\n\n        st.header(\"Create User\")\n        new_username = st.text_input(\"New Username\")\n        new_password = st.text_input(\"New Password\", type=\"password\")\n        create_user = st.button(\"Create User\")\n\n    # Streamlit main content\n    if st.sidebar.button(\"Login\"):\n        if username in user_credentials and user_credentials[username] == password:\n            st.success(\"Access granted!\")\n        else:\n            st.error(\"Access denied. Please check your username and password.\")\n\n    if create_user:\n        create_new_user(new_username, new_password, user_credentials)\n\n# Function to create a new user\ndef create_new_user(username, password, user_credentials):\n    if username and password:\n        user_credentials[username] = password\n        st.success(f\"User '{username}' has been created.\")\n    else:\n        st.warning(\"Please provide both a username and a password for user creation.\")\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account.py b/account.py
--- a/account.py	(revision 1d2fa90860c82c34496e90deaf5b06cd99e958d5)
+++ b/account.py	(date 1695536747254)
@@ -22,15 +22,17 @@
         new_password = st.text_input("New Password", type="password")
         create_user = st.button("Create User")
 
-    # Streamlit main content
+    if create_user:
+        create_new_user(new_username, new_password, user_credentials)
+        new_username = ""
+        new_password = ""
+
     if st.sidebar.button("Login"):
         if username in user_credentials and user_credentials[username] == password:
             st.success("Access granted!")
         else:
             st.error("Access denied. Please check your username and password.")
-
-    if create_user:
-        create_new_user(new_username, new_password, user_credentials)
+            st.write(user_credentials)
 
 # Function to create a new user
 def create_new_user(username, password, user_credentials):
